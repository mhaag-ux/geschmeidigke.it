<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enter the Network</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: #0a0a0a;
            color: #fff;
            overflow: hidden;
            height: 100vh;
        }

        /* Flash effect */
        .flash {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #fff;
            z-index: 1000;
            animation: flashEffect 0.3s ease-out;
            pointer-events: none;
        }

        @keyframes flashEffect {
            0% { opacity: 1; }
            100% { opacity: 0; }
        }

        /* Spinning disc container */
        .disc-container {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            height: 300px;
            z-index: 100;
            animation: discSequence 4s ease-in-out forwards;
            animation-delay: 0.3s;
        }

        .disc {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: linear-gradient(135deg, #6b00ff 0%, #b721ff 50%, #6b00ff 100%);
            box-shadow: 
                0 0 60px rgba(107, 0, 255, 0.8),
                0 0 120px rgba(183, 33, 255, 0.5),
                inset 0 0 60px rgba(183, 33, 255, 0.3);
            animation: spinDisc 3s linear;
            position: relative;
        }

        .disc::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 80px;
            height: 80px;
            background: #0a0a0a;
            border-radius: 50%;
            box-shadow: 0 0 30px rgba(107, 0, 255, 0.8);
        }

        .disc::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border-radius: 50%;
            background: linear-gradient(
                to right,
                transparent 0%,
                rgba(255, 255, 255, 0.3) 50%,
                transparent 100%
            );
            animation: discSheen 1s linear infinite;
        }

        @keyframes spinDisc {
            0% { 
                transform: rotate(0deg) scale(1);
                opacity: 1;
            }
            70% {
                transform: rotate(1080deg) scale(1.2);
                opacity: 1;
            }
            100% { 
                transform: rotate(1800deg) scale(2.5);
                opacity: 0;
                filter: blur(20px);
            }
        }

        @keyframes discSheen {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes discSequence {
            0% { opacity: 1; }
            85% { opacity: 1; }
            100% { opacity: 0; pointer-events: none; }
        }

        /* Rhizome network */
        .rhizome-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            animation: revealRhizome 1.5s ease-out forwards;
            animation-delay: 3.5s;
        }

        @keyframes revealRhizome {
            0% { 
                opacity: 0;
                transform: scale(0.5);
                filter: blur(20px);
            }
            100% { 
                opacity: 1;
                transform: scale(1);
                filter: blur(0);
            }
        }

        .rhizome-bg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 30%, rgba(107, 0, 255, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(183, 33, 255, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 50% 50%, rgba(75, 0, 130, 0.1) 0%, transparent 70%);
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        /* Content overlay */
        .content {
            position: relative;
            z-index: 10;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            opacity: 0;
            animation: fadeInContent 1s ease-out forwards;
            animation-delay: 4.5s;
        }

        @keyframes fadeInContent {
            to { opacity: 1; }
        }

        .title {
            font-size: 4rem;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 8px;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, #6b00ff, #b721ff, #6b00ff);
            background-size: 200% 200%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: gradientShift 3s ease infinite;
            text-shadow: 0 0 30px rgba(107, 0, 255, 0.5);
            position: relative;
        }

        .title::before {
            content: attr(data-text);
            position: absolute;
            left: 2px;
            top: 2px;
            color: rgba(107, 0, 255, 0.5);
            z-index: -1;
            animation: glitch1 2s infinite;
        }

        @keyframes gradientShift {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        @keyframes glitch1 {
            0%, 90%, 100% { transform: translate(0); }
            92% { transform: translate(-2px, 2px); }
            94% { transform: translate(2px, -2px); }
            96% { transform: translate(-2px, -2px); }
            98% { transform: translate(2px, 2px); }
        }

        .subtitle {
            font-size: 1.2rem;
            color: #b721ff;
            margin-bottom: 4rem;
            letter-spacing: 4px;
            text-transform: lowercase;
            opacity: 0.8;
        }

        .nav-links {
            display: flex;
            gap: 3rem;
            margin-top: 2rem;
        }

        .nav-link {
            position: relative;
            padding: 1.5rem 3rem;
            background: rgba(107, 0, 255, 0.1);
            border: 2px solid #6b00ff;
            color: #b721ff;
            text-decoration: none;
            font-size: 1.2rem;
            text-transform: uppercase;
            letter-spacing: 3px;
            transition: all 0.3s ease;
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(183, 33, 255, 0.3), transparent);
            transition: left 0.5s ease;
        }

        .nav-link:hover {
            background: rgba(107, 0, 255, 0.3);
            border-color: #b721ff;
            box-shadow: 
                0 0 20px rgba(107, 0, 255, 0.6),
                0 0 40px rgba(183, 33, 255, 0.4),
                inset 0 0 20px rgba(183, 33, 255, 0.2);
            transform: translateY(-2px);
        }

        .nav-link:hover::before {
            left: 100%;
        }

        .nav-link-text {
            position: relative;
            z-index: 1;
        }

        /* Particles */
        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: #b721ff;
            border-radius: 50%;
            opacity: 0.5;
            animation: float 10s infinite;
        }

        @keyframes float {
            0%, 100% { 
                transform: translate(0, 0);
                opacity: 0.5;
            }
            50% { 
                transform: translate(var(--tx), var(--ty));
                opacity: 1;
            }
        }

        /* Scanline effect */
        .scanline {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                to bottom,
                transparent 0%,
                rgba(107, 0, 255, 0.05) 50%,
                transparent 100%
            );
            animation: scan 8s linear infinite;
            pointer-events: none;
            z-index: 5;
        }

        @keyframes scan {
            0% { transform: translateY(-100%); }
            100% { transform: translateY(100%); }
        }

        @media (max-width: 768px) {
            .title {
                font-size: 2.5rem;
                letter-spacing: 4px;
            }
            .subtitle {
                font-size: 1rem;
            }
            .nav-links {
                flex-direction: column;
                gap: 1.5rem;
            }
            .nav-link {
                padding: 1rem 2rem;
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Flash effect -->
    <div class="flash"></div>

    <!-- Spinning disc -->
    <div class="disc-container">
        <div class="disc"></div>
    </div>

    <!-- Rhizome background -->
    <div class="rhizome-container">
        <div class="rhizome-bg"></div>
        <canvas id="rhizomeCanvas"></canvas>
    </div>

    <!-- Scanline effect -->
    <div class="scanline"></div>

    <!-- Main content -->
    <div class="content">
        <h1 class="title" data-text="NEXUS">NEXUS</h1>
        <p class="subtitle">// enter the network //</p>
        
        <nav class="nav-links">
            <a href="/chinese-characters" class="nav-link">
                <span class="nav-link-text">字 Characters</span>
            </a>
            <a href="/rhizome" class="nav-link">
                <span class="nav-link-text">◈ Rhizome</span>
            </a>
        </nav>
    </div>

    <script>
        // Create floating particles
        function createParticles() {
            const container = document.body;
            const particleCount = 50;

            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.setProperty('--tx', (Math.random() - 0.5) * 200 + 'px');
                particle.style.setProperty('--ty', (Math.random() - 0.5) * 200 + 'px');
                particle.style.animationDelay = Math.random() * 10 + 's';
                container.appendChild(particle);
            }
        }

        // Draw rhizome network
        function drawRhizome() {
            const canvas = document.getElementById('rhizomeCanvas');
            const ctx = canvas.getContext('2d');
            
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            const nodes = [];
            const nodeCount = 30;

            // Create nodes
            for (let i = 0; i < nodeCount; i++) {
                nodes.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    vx: (Math.random() - 0.5) * 0.5,
                    vy: (Math.random() - 0.5) * 0.5,
                    radius: Math.random() * 3 + 2,
                    connections: []
                });
            }

            // Create connections
            nodes.forEach((node, i) => {
                nodes.forEach((otherNode, j) => {
                    if (i !== j) {
                        const dist = Math.hypot(node.x - otherNode.x, node.y - otherNode.y);
                        if (dist < 200) {
                            node.connections.push({ node: otherNode, dist });
                        }
                    }
                });
            });

            function animate() {
                ctx.fillStyle = 'rgba(10, 10, 10, 0.05)';
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                // Update and draw nodes
                nodes.forEach(node => {
                    node.x += node.vx;
                    node.y += node.vy;

                    if (node.x < 0 || node.x > canvas.width) node.vx *= -1;
                    if (node.y < 0 || node.y > canvas.height) node.vy *= -1;

                    // Draw connections
                    node.connections.forEach(conn => {
                        const opacity = Math.max(0, 1 - conn.dist / 200);
                        ctx.strokeStyle = `rgba(107, 0, 255, ${opacity * 0.3})`;
                        ctx.lineWidth = 1;
                        ctx.beginPath();
                        ctx.moveTo(node.x, node.y);
                        ctx.lineTo(conn.node.x, conn.node.y);
                        ctx.stroke();
                    });

                    // Draw node
                    const gradient = ctx.createRadialGradient(node.x, node.y, 0, node.x, node.y, node.radius * 3);
                    gradient.addColorStop(0, 'rgba(183, 33, 255, 0.8)');
                    gradient.addColorStop(0.5, 'rgba(107, 0, 255, 0.4)');
                    gradient.addColorStop(1, 'rgba(107, 0, 255, 0)');
                    
                    ctx.fillStyle = gradient;
                    ctx.beginPath();
                    ctx.arc(node.x, node.y, node.radius * 3, 0, Math.PI * 2);
                    ctx.fill();

                    ctx.fillStyle = '#b721ff';
                    ctx.beginPath();
                    ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
                    ctx.fill();
                });

                requestAnimationFrame(animate);
            }

            animate();
        }

        // Initialize
        window.addEventListener('load', () => {
            createParticles();
            setTimeout(drawRhizome, 3500);
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            drawRhizome();
        });
    </script>
</body>
</html>
